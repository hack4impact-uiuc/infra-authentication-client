{"version":3,"file":"static/webpack/static/development/pages/_app.js.ceda99753efa84becce1.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import API_URL from '../components/globalApiUrl.js'\nimport App, {Container} from 'next/app'\nimport React from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport redirectTo from '../components/redirectTo.js'\nimport cookies from 'next-cookies'\n\nexport default class extends App {\n\n  static async getInitialProps ({ Component, router, ctx }) {\n    let pageProps = {};\n    const c = cookies(ctx);\n    // console.log(ctx)\n    // console.log(c.authtoken)\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    //if the authtoken is not found\n    if(typeof c.authtoken == 'undefined') {\n      //don't do anything if we are on a page that doesn't require credentials\n      if(ctx.pathname == \"/login\" || ctx.pathname == \"/forgot-password\") return {pageProps};\n      //if we are on any other page, redirect to the login page\n      else redirectTo('/login', { res: ctx.res, status: 301 })\n    }\n    //if we do have an auth token to check\n    else {\n      var response = await fetch(API_URL+'/isLoggedIn', {\n        method: 'POST', headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token:c.authtoken} )\n      })\n      .then( r => r.json() )\n      .then( resp => {\n\n        if(ctx.pathname == \"/\")  {\n\n          //if auth check was successful, send to dashboard\n        //   if(resp.result == \"success\") redirectTo('/secret', { res: ctx.res, status: 301 })\n        //   else {\n\n        //     //setting the cookie to expire way back when removes it\n        //     document.cookie = \"authtoken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n            redirectTo('/login', { res: ctx.res, status: 301 })\n\n        //   }\n\n        }\n\n        else if(ctx.pathname == \"/login\") {\n\n          //shouldn't show the login page is we are already logged in\n          if(resp.result == \"success\") { redirectTo('/secret', { res: ctx.res, status: 301 });  }\n\n          //if it wasn't successful, stay where we are\n          else return {...pageProps, ...{query: ctx.query, authtoken: c.authtoken}};\n\n        }\n\n        //any other page that requires a login\n        else {\n\n          //if auth check was successful, stay where we are\n          if(resp.result == \"success\") return {...pageProps, ...{query: ctx.query, authtoken: c.authtoken}};\n\n          //if it wasn't successful, clear the authtoken since it must be expired or invalid and redirect to login\n          else { \n            document.cookie = \"authtoken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n            redirectTo('/login', { res: ctx.res, status: 301 });\n          }\n        }\n\n      })\n      .catch((err) => { console.log(err); return {pageProps}; })\n    }\n\n    if(response !== null) { return {response}; }\n    else return {pageProps};\n\n  }\n\n  render () {\n    const {Component, pageProps} = this.props\n\n    return <Container>\n      <Component {...this.props.response} />\n    </Container>\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AA2EA;AAAA;AAAA;AAAA;AAGA;AAGA;;;;;;;;;;;;AA9EA;AACA;AACA;AAEA;AACA;AACA;;;;;;AACA;AACA;;AADA;AACA;;AAGA;;;;;AAEA;;;;;AAAA;AAAA;AAAA;AACA;;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AARA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AA9CA;AACA;;AA+CA;;;;;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAvEA;AACA;;;;;A","sourceRoot":""}